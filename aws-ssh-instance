#! /usr/bin/bash

AWS_PROFILE="tooling"
instanceName="$1"

spinner="/-\|"

# Identify the instance itself.
echo "looking for instance $instanceName"
instanceId=$(aws ec2 describe-instances | jq ".Reservations[].Instances[] | {InstanceId, Name: .Tags[] | select(.Key==\"Name\").Value} | select(.Name==\"$instanceName\").InstanceId" -r)

if [ -z "$instanceId" ]
then
	echo "instance $instanceName not found"
	exit
fi

# Start the instance if necessary, then wait for the instance to be running.
initialState=$(aws ec2 describe-instance-status --instance-ids "$instanceId" | jq '.InstanceStatuses[0].InstanceState.Name' -r)
if [ "$initialState" != "running" ]
then
	echo "starting $instanceId"
	aws ec2 start-instances --instance-ids "$instanceId" > /dev/null 2>&1 
	echo "started"
fi

spinnerIndex=1
while true
do
	state=$(aws ec2 describe-instance-status --instance-ids "$instanceId" | jq '.InstanceStatuses[0].InstanceState.Name' -r)
	if [ "$state" != "running" ]
	then
		printf "\b%c" ${spinner:spinnerIndex++%${#spinner}:1}
		continue
	fi
	break
done
if [ $spinnerIndex != 1 ]
then
	printf "\b"
fi

# Wait for the instance to be reachable.
spinnerIndex=1
while true
do
	status=$(aws ec2 describe-instance-status --instance-ids "$instanceId" | jq '.InstanceStatuses[0].InstanceStatus.Status' -r)
	if [ "$status" != "ok" ]
	then
		printf "\b%c" ${spinner:spinnerIndex++%${#spinner}:1}
		continue
	fi
	break
done
if [ $spinnerIndex != 1 ]
then
	printf "\b"
fi

# Find the public ip of the instance.
instanceIp=$(aws ec2 describe-instances --instance-ids "$instanceId" | jq ".Reservations[].Instances[0].PublicIpAddress" -r)

ssh -i "$AWS_SSH_KEY" "ubuntu@$instanceIp"

if [ "$initialState" != "running" ]
then
	echo "stoping instance"
	aws ec2 stop-instances --instance-ids "$instanceId" > /dev/null 2>&1
else
	echo "instance left running"
fi
